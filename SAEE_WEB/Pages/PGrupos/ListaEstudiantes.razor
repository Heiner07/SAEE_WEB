@inject EstudiantesGruposServices EGServices

    <MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
        <MatDialogTitle>Lista de estudiantes</MatDialogTitle>
        <MatDialogContent>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
                <div class="input-group-append">
                    <button class="btn btn-info">
                        <i>Buscar</i>
                    </button>
                </div>
            </div>
        </MatDialogContent>
        <MatDialogContent>

            @if (estudiantes == null)
            {
                <text>Cargando estudiantes...</text>
            }
            else if (estudiantes.Count == 0)
            {
                <text>No hay estudiantes</text>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Cédula</th>
                            <th>Nombre</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var estudiante in estudiantes)
                        {
                            if (estudiante.Nombre.ToLower().StartsWith(TextoBuscar.ToLower()))
                            {
                                <tr>
                                    <td>@estudiante.Cedula</td>
                                    <td>@estudiante.Nombre @estudiante.PrimerApellido @estudiante.SegundoApellido</td>
                                    <td>
                                        <button class="btn btn-outline-danger" @onclick="(() => MostrarPanelBorrar(estudiante))">Borrar</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

            }
        </MatDialogContent>
        <MatDialogActions>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OcultarPanelEstudiantes">Cerrar</button>
                <button type="button" class="btn btn-success" @onclick="MostrarPanelAniadir">Añadir</button>
            </div>
        </MatDialogActions>
    </MatDialog>
<SAEE_WEB.Pages.PEstudiantes.Delete dialogIsOpen="@mostrarBorrar" Estudiante="@estudianteEditar" CerrarEliminar="@OcultarPanelBorrar" EnGrupos="true" Grupo="@Grupo" />
<ListaAgregarEstudiantes dialogIsOpen="@mostrarAniadir" OcultarPanelAniadir="@OcultarPanelAniadir" Grupo="@Grupo" estudiantes="@estudiantes" IdProfesor="IdProfesor" />

@code {
    [Parameter]
    public bool dialogIsOpen { get; set; }
    public List<Estudiantes> estudiantes = new List<Estudiantes>();
    Estudiantes estudianteEditar = new Estudiantes();
    Boolean mostrarBorrar = false;
    Boolean mostrarAniadir = false;
    String TextoBuscar = "";
    [Parameter] public EventCallback Editar { get; set; }
    [Parameter] public EventCallback Borrar { get; set; }
    [Parameter] public EventCallback OcultarPanelEstudiantes { get; set; }
    [Parameter] public Grupos Grupo { get; set; }
    [Parameter] public int IdProfesor { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await CargarEstudiantes();
    }

    async Task CargarEstudiantes()
    {
        estudiantes = await EGServices.GetEstudiantesXGrupos(Grupo);
    }
    void MostrarPanelBorrar(Estudiantes estudiante)
    {
        estudianteEditar = estudiante;
        mostrarBorrar = true;
    }
    void MostrarPanelAniadir()
    {
        mostrarAniadir = true;
    }
    void OcultarPanelAniadir()
    {
        mostrarAniadir = false;
    }
    async Task OcultarPanelBorrar()
    {
        await CargarEstudiantes();
        mostrarBorrar = false;
    }
}
