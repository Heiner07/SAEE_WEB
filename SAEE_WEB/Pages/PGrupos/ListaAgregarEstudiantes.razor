@inject GruposServices gruposServices
@inject EstudiantesServices  estudiantesServices

<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="OcultarPanelAniadir">
                    <span aria-hidden="true">&times;</span>
                </button>

                @if (todosEstudiantes == null)
                {
                    <text>Cargando estudiantes...</text>
                }
                else if (todosEstudiantes.Count == 0)
                {
                    <text>No hay estudiantes</text>
                }
                else
                {
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
                        <div class="input-group-append">
                            <button class="btn btn-info">
                                <i>Buscar</i>
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Cédula</th>
                                    <th>Nombre</th>
                                    <th>Agregar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var estudiante in todosEstudiantes)
                                {
                                    if (estudiante.Nombre.ToLower().StartsWith(TextoBuscar.ToLower()))
                                    {
                                        @if (estudiantes.Count == 0)
                                        {
                                            <tr>
                                                <td>@estudiante.Cedula</td>
                                                <td>@estudiante.Nombre @estudiante.PrimerApellido @estudiante.SegundoApellido</td>
                                                <td>

                                                    <input name="ListaAgregar" type="checkbox" bind="@agregado" @onchange="eventArgs => { CheckboxClicked(estudiante, eventArgs.Value); }">
                                                </td>
                                            </tr>
                                        }
                                        else if (!(estudiantes.Exists(grupoTemp => grupoTemp.Id == estudiante.Id)))
                                        {

                                            <tr>
                                                <td>@estudiante.Cedula</td>
                                                <td>@estudiante.Nombre @estudiante.PrimerApellido @estudiante.SegundoApellido</td>
                                                <td>

                                                    <input name="ListaAgregar" type="checkbox" bind="@agregado" @onchange="eventArgs => { CheckboxClicked(estudiante, eventArgs.Value); }" > 
                                                </td>
                                            </tr>


                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <button type="button" class="btn btn-success" @onclick="AgregarEstudiantes"><span class="glyphicon glyphicon-plus"></span>Agregar</button>

            </div>
        </div>
    </div>
</div>
@code {
    public List<Estudiantes> todosEstudiantes;
    public List<Estudiantes> estudiantesAgregar = new List<Estudiantes>();
    public List<EstudiantesXgrupos> EG = new List<EstudiantesXgrupos>();
    String TextoBuscar = "";
    [Parameter] public EventCallback OcultarPanelAniadir { get; set; }
    [Parameter] public Grupos Grupo { get; set; }
    [Parameter] public List<Estudiantes> estudiantes { get; set; } = new List<Estudiantes>();
    public bool agregado { get; set; } = false;
    [Parameter] public int IdProfesor { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await CargarEstudiantes();
    }

    async Task CargarEstudiantes()
    {
        //estudiantes = await gruposServices.GetEstudiantesXGrupos(Grupo);
        todosEstudiantes = await estudiantesServices.GetEstudiantes(IdProfesor);
    }

    async Task AgregarEstudiantes()
    {
        estudiantes.AddRange(estudiantesAgregar);

        foreach (var estudiante in estudiantes) {
            EG.Add(new EstudiantesXgrupos() {
                IdProfesor = 1,
                IdGrupo = Grupo.Id,
                IdEstudiante = estudiante.Id

            });

        }
        Grupo.EstudiantesXgrupos = EG;
        await gruposServices.EditarGrupo(Grupo);
        await OcultarPanelAniadir.InvokeAsync(null);


    }
    void CheckboxClicked(Estudiantes estudiante,object checkedValue)
    {
        if ((bool)checkedValue)
        {
            estudiantesAgregar.Add(estudiante);
        }
        else estudiantesAgregar.Remove(estudiante);

    }

}
