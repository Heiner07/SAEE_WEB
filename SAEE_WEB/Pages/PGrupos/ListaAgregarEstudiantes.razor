@inject GruposServices gruposServices
@inject EstudiantesServices  estudiantesServices

    <MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
        <MatDialogTitle>Agregar estudiantes al grupo</MatDialogTitle>
        <MatDialogContent  >
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
                <div class="input-group-append">
                    <button class="btn btn-info">
                        <i>Buscar</i>
                    </button>
                </div>
            </div>
        </MatDialogContent>
        <MatDialogContent>

            @if (todosEstudiantes == null)
            {
                <text>Cargando estudiantes...</text>
            }
            else if (todosEstudiantes.Count == 0)
            {
                <text>No hay estudiantes para agregar</text>
            }
            else
            {

                <table class="table">

                    <thead>
                        <tr>
                            <th>Cédula</th>
                            <th>Nombre</th>
                            <th>Agregar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var estudiante in todosEstudiantes)
                        {
                            if (estudiante.Nombre.ToLower().StartsWith(TextoBuscar.ToLower()))
                            {
                                @if (estudiantes.Count == 0)
                                {
                                    <tr>
                                        <td>@estudiante.Cedula</td>
                                        <td>@estudiante.Nombre @estudiante.PrimerApellido @estudiante.SegundoApellido</td>
                                        <td>

                                            <input name="ListaAgregar" type="checkbox" bind="@agregado" @onchange="eventArgs => { CheckboxClicked(estudiante, eventArgs.Value); }">
                                        </td>
                                    </tr>
                                }
                                else if (!(estudiantes.Exists(grupoTemp => grupoTemp.Id == estudiante.Id)))
                                {

                                    <tr>
                                        <td>@estudiante.Cedula</td>
                                        <td>@estudiante.Nombre @estudiante.PrimerApellido @estudiante.SegundoApellido</td>
                                        <td>
                                            <input name="ListaAgregar" type="checkbox" bind="@agregado" @onchange="eventArgs => { CheckboxClicked(estudiante, eventArgs.Value); }">
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>

            }
        </MatDialogContent>
        <MatDialogActions>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OcultarPanelAniadir">Cerrar</button>
                <button type="button" class="btn btn-success" @onclick="AgregarEstudiantes">Agregar</button>
            </div>
        </MatDialogActions>
    </MatDialog>

@code {
    [Parameter]
    public bool dialogIsOpen { get; set; } = false;
    public List<Estudiantes> todosEstudiantes = new List<Estudiantes>();
    public List<Estudiantes> estudiantesAgregar = new List<Estudiantes>();
    public List<EstudiantesXgrupos> EG = new List<EstudiantesXgrupos>();
    String TextoBuscar = "";
    [Parameter] public EventCallback OcultarPanelAniadir { get; set; }
    [Parameter] public Grupos Grupo { get; set; }
    [Parameter] public List<Estudiantes> estudiantes { get; set; } = new List<Estudiantes>();
    public bool agregado { get; set; } = false;
    [Parameter] public int IdProfesor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarEstudiantes();
        
    }
    

    async Task CargarEstudiantes()
    {
        todosEstudiantes = await estudiantesServices.GetEstudiantes(IdProfesor);
    }

    async Task AgregarEstudiantes()
    {
        estudiantes.AddRange(estudiantesAgregar);

        foreach (var estudiante in estudiantes) {
            EG.Add(new EstudiantesXgrupos() {
                IdProfesor = 1,
                IdGrupo = Grupo.Id,
                IdEstudiante = estudiante.Id

            });

        }
        Grupo.EstudiantesXgrupos = EG;
        await gruposServices.EditarGrupo(Grupo);
        await OcultarPanelAniadir.InvokeAsync(null);


    }
    void CheckboxClicked(Estudiantes estudiante,object checkedValue)
    {
        if ((bool)checkedValue)
        {
            estudiantesAgregar.Add(estudiante);
        }
        else estudiantesAgregar.Remove(estudiante);

    }

}
