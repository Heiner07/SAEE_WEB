@inject GruposServices gruposServices
@inject NavigationManager navegar




<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
        <MatDialogTitle>Editando Grupos</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@grupo">
                <div class="form-group">
                <label for="InputGrupo"><strong>Grupo</strong></label>
               
                    <input class="form-control" type="text" placeholder="Grupo" @bind="grupo.Grupo" id="InputGrupo" />
                    <ValidationMessage For="@(() => grupo.Grupo)" />
               </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@RevertirCambios">Cancelar</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="@(() => modificarGrupo(grupo))">Guardar</button>
                </div>
                <DataAnnotationsValidator />
            </EditForm>
        </MatDialogContent>
</MatDialog>
              
          

@code {
    [Parameter]
    public bool dialogIsOpen { get; set; }
    [Parameter] public Grupos grupo { get; set; }
    [Parameter] public EventCallback CerrarEditar { get; set; }
    [Parameter] public Boolean MostrarError { get; set; }
    [Parameter] public String msjError { get; set; }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    protected async Task modificarGrupo(Grupos grupo)
    {
        if (grupo.Grupo != null)
        {
            Boolean exito = await gruposServices.EditarGrupo(grupo);
            if (exito)
            {
                navegar.NavigateTo("indice-grupos/2", true);
            }
            else { msjError = "No se pudo crear este grupo."; MostrarError = true; }
        }

    }
    async Task RevertirCambios()
    {
        await gruposServices.RollbackGrupos(grupo);
        await CerrarEditar.InvokeAsync(null);
    }
}


