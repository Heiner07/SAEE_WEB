@inject GruposServices gruposServices
@inject NavigationManager  navegar

<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
    <MatDialogTitle>Agregar grupos al curso</MatDialogTitle>
    <MatDialogContent>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
            <div class="input-group-append">
                <button class="btn btn-info">
                    <i>Buscar</i>
                </button>
            </div>
        </div>
        @if (grupos == null)
        {
            <text>Cargando... </text>
        }
        else if (grupos.Count == 0)
        {
            <text>No hay grupos disponibles para agregar</text>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Grupo</th>
                        <th>Año</th>
                        <th>Agregar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var grupo in grupos)
                    {
                        if (grupo.Grupo.ToLower().StartsWith(TextoBuscar.ToLower()))
                        {
                            <tr>
                                <td>@grupo.Grupo</td>
                                <td>@grupo.Anio</td>
                                <td>
                                    @if (GruposAgregados.Exists(grupoTemp => grupoTemp.IdGrupo == grupo.Id))
                                    {
                                        <MatCheckbox Value="true" @onclick="@(()=>RemoverGrupo(grupo))"></MatCheckbox>
                                        @*<input type="checkbox" checked="checked" @onclick="@(()=>RemoverGrupo(grupo))">*@
                                    }
                                    else
                                    {
                                        <MatCheckbox Value="false" @onclick="@(()=>AgregarGrupo(grupo))"></MatCheckbox>
                                        @*<input type="checkbox" @onclick="@(()=>AgregarGrupo(grupo))">*@
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </MatDialogContent>
    <MatDialogActions>
        <button type="button" class="btn btn-primary" @onclick="OcultarModel">Cerrar</button>
    </MatDialogActions>
</MatDialog>


@code {
    [Parameter]
    public bool dialogIsOpen { get; set; } = false;
    [Parameter]
    public List<CursosGrupos> GruposAgregados { get; set; }
    [Parameter]
    public int IdCurso { get; set; }
    [Parameter]
    public int IdProfesor { get; set; }
    [Parameter]
    public EventCallback OcultarModel { get; set; }

    public List<Grupos> grupos;
    string TextoBuscar = "";

    protected override async Task OnInitializedAsync()
    {

        await CargarGrupos();

    }

    async Task CargarGrupos()
    {
        grupos = (await gruposServices.GetGrupos(IdProfesor)).
                Where(g => !GruposAgregados.Exists(cg => cg.IdGrupo == g.Id)).ToList();
    }

    void AgregarGrupo(Grupos grupo)
    {
        GruposAgregados.Add(new CursosGrupos()
        {
            Id = -1,
            IdCurso = this.IdCurso,
            IdGrupo = grupo.Id,
            IdGrupoNavigation = grupo
        });
    }

    void RemoverGrupo(Grupos grupo)
    {
        GruposAgregados.RemoveAt(GruposAgregados.FindIndex(grupoTemp => grupoTemp.IdGrupo == grupo.Id));
    }
}
