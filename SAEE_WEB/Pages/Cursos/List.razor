@inject CursosServices ServicioCursos

@if (cursos == null)
{
    <text>Cargando cursos...</text>
}
else if (cursos.Length == 0)
{
    <text>No hay cursos</text>
}
else
{
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
        <div class="input-group-append">
            <button class="btn btn-info">
                <i>Buscar</i>
            </button>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Periodos</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var curso in cursos)
                {
                    if (curso.Nombre.ToLower().StartsWith(TextoBuscar.ToLower()))
                    {
                        <tr>
                            <td>@curso.Nombre</td>
                            <td>@curso.CantidadPeriodos</td>
                            <td>
                                <button class="btn btn-outline-info" @onclick="(()=>MostrarPanelEditar(curso))">
                                    Editar
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="(()=>MostrarPanelGrupos(curso))">
                                    Grupos
                                </button>
                                <button class="btn btn-outline-danger" @onclick="(()=>MostrarPanelBorrar(curso))">
                                    Borrar
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
@if (mostrarEditar)
{
    <Edit curso="cursoEditar" IdProfesor="@IdProfesor" CerrarEditar="@OcultarPanelEditar" />
}
@if (mostrarGrupos)
{
    <ListGruposAgregados Curso="cursoEditar" IdProfesor="@IdProfesor" OcultarGruposAgregados="OcultarPanelGrupos" />
}
@if (mostrarBorrar)
{
    <Delete Curso="@cursoEditar" CerrarEliminar="@OcultarPanelBorrar" />
}

@code {
    [Parameter]
    public int IdProfesor { get; set; }

    Cursos[] cursos { get; set; }
    CursosGrupos[] CursosGrupos { get; set; }
    CursosGrupos[] CursosGruposFiltrados { get; set; }
    Cursos cursoEditar;
    Boolean mostrarEditar = false, mostrarGrupos = false, mostrarBorrar = false;
    String TextoBuscar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarCursos();
    }

    async Task CargarCursos()
    {
        cursos = await ServicioCursos.GetCursos(IdProfesor);
    }

    void MostrarPanelEditar(Cursos curso)
    {
        cursoEditar = curso;
        mostrarEditar = true;
    }

    void OcultarPanelEditar()
    {
        mostrarEditar = false;
    }

    void MostrarPanelGrupos(Cursos curso)
    {
        cursoEditar = curso;
        mostrarGrupos = true;
    }

    void OcultarPanelGrupos()
    {
        mostrarGrupos = false;
    }

    void MostrarPanelBorrar(Cursos curso)
    {
        cursoEditar = curso;
        mostrarBorrar = true;
    }

    void OcultarPanelBorrar()
    {
        mostrarBorrar = false;
    }
}
