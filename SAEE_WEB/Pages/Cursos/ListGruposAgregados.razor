@inject CursosServices ServicioCursos
@inject NavigationManager Navigation

<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
    <MatDialogTitle>Grupos del curso</MatDialogTitle>
    <MatDialogContent>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
            <div class="input-group-append">
                <button class="btn btn-info">
                    <i>Buscar</i>
                </button>
            </div>
        </div>

        @if (GruposAgregados.Count == 0)
        {
            <text>No hay grupos</text>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Grupo</th>
                        <th>Año</th>
                        <th>Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cursoGrupo in GruposAgregados)
                    {
                        if (cursoGrupo.IdGrupoNavigation.Grupo.ToLower().StartsWith(TextoBuscar.ToLower()))
                        {
                            <tr>
                                <td>@cursoGrupo.IdGrupoNavigation.Grupo</td>
                                <td>@cursoGrupo.IdGrupoNavigation.Anio</td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => RemoverGrupo(cursoGrupo)">Borrar</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        <div>
            <ListGruposAgregar dialogIsOpen="MostrarGrupos" OcultarModel="OcultarGruposAgregar" IdCurso="@Curso.Id" GruposAgregados="@GruposAgregados" IdProfesor="IdProfesor" />
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <div>
            <label>*Presione Guardar para almacenar cambios realizados.</label>
            <br />
            <button type="button" class="btn btn-success" @onclick="MostarGruposAgregar">Agregar</button>
            <button type="button" class="btn btn-secondary" @onclick="OcultarGruposAgregados">Cancelar</button>
            <button type="button" class="btn btn-primary" @onclick="GuardarCursosGrupos">Guardar</button>
        </div>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public bool dialogIsOpen { get; set; } = false;
    [Parameter]
    public List<CursosGrupos> GruposAgregados { get; set; }
    [Parameter]
    public Cursos Curso { get; set; }
    [Parameter]
    public int IdProfesor { get; set; }
    [Parameter]
    public EventCallback OcultarGruposAgregados { get; set; }

    bool MostrarGrupos = false;
    string TextoBuscar = string.Empty;

    protected override Task OnParametersSetAsync()
    {
        GruposAgregados = Curso.CursosGrupos.ToList();
        TextoBuscar = string.Empty;
        return base.OnParametersSetAsync();
    }

    async Task GuardarCursosGrupos()
    {
        List<CursosGrupos> GruposAgregadosPreparados = new List<CursosGrupos>();
        foreach(CursosGrupos cg in GruposAgregados)
        {
            if(cg.Id == -1)
            {
                GruposAgregadosPreparados.Add(new CursosGrupos
                {
                    IdCurso = cg.IdCurso,
                    IdGrupo = cg.IdGrupo
                });
            }
            else
            {
                GruposAgregadosPreparados.Add(cg);
            }
        }
        Curso.CursosGrupos = GruposAgregadosPreparados;
        await ServicioCursos.PutCursos(Curso);
        Navigation.NavigateTo("cursos", true);
    }

    void MostarGruposAgregar()
    {
        MostrarGrupos = true;
    }

    void OcultarGruposAgregar()
    {
        MostrarGrupos = false;
    }

    void RemoverGrupo(CursosGrupos cursoGrupo)
    {
        GruposAgregados.RemoveAt(GruposAgregados.FindIndex(grupoTemp => grupoTemp.IdGrupo == cursoGrupo.IdGrupo));
    }
}
