@inject GruposServices gruposServices
@inject NavigationManager  navegar

@if (grupos == null)
{
    <text> Cargando... </text>
}
else if (grupos.Count == 0)
{
    <text> No hay grupos en la base de datos</text>
}
else
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Agregar o quitar grupos del curso</h3>
                    <button type="button" class="close" @onclick="OcultarModel">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Grupo</th>
                                <th>Año</th>
                                <th>Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var grupo in grupos)
                            {
                                <tr>
                                    <td>@grupo.Grupo</td>
                                    <td>@grupo.Anio</td>
                                    <td>
                                        @if (GruposAgregados.Exists(grupoTemp => grupoTemp.IdGrupo == grupo.Id))
                                        {
                                            <button type="button" class="btn btn-outline-info" @onclick="@(()=>RemoverGrupo(grupo))">Quitar</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-outline-info" @onclick="@(()=>AgregarGrupo(grupo))">Agregar</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
@code {
    public List<Grupos> grupos;
    [Parameter] public List<CursosGrupos> GruposAgregados { get; set; }
    [Parameter] public int IdCurso { get; set; }
    //[Parameter] public Cursos Curso { get; set; }
    //[Parameter] public EventCallback<Grupos> AgregarGrupo { get; set; }
    [Parameter] public EventCallback OcultarModel { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await CargarGrupos();

    }

    async Task CargarGrupos()
    {
        grupos = await gruposServices.GetGrupos();
        //grupos = new List<Grupos>()
        //{
        //    new Grupos(){Id = 1, Anio = 2019, Grupo = "Sección 11-2"},
        //    new Grupos(){Id = 2, Anio = 2019, Grupo = "Sección 10-5"},
        //    new Grupos(){Id = 3, Anio = 2019, Grupo = "Sección 9-3"}
        //};
    }

    void AgregarGrupo(Grupos grupo)
    {
        GruposAgregados.Add(new CursosGrupos()
        {
            IdCurso = this.IdCurso,
            IdGrupo = grupo.Id
        });
    }

    void RemoverGrupo(Grupos grupo)
    {
        GruposAgregados.RemoveAt(GruposAgregados.FindIndex(grupoTemp => grupoTemp.IdGrupo == grupo.Id));
    }
}
