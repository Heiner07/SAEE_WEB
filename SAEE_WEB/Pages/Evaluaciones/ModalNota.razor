@inject AsignacionesServices ServicioAsignaciones
@inject EvaluacionesServices ServicioEvaluaciones
<style>
    input[type=number], select {
        width: 90%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
    .modal-body{
        height: 300px;
        overflow-y: auto;
    }
</style>
@{ var list1 = new List<string> { "Presente", "Escape", "Justificada", "Injustificada", "Tardía" }; }
<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title mr-4">@asignacion.Nombre</h5>
                <p class="mr-4">Puntos: @asignacion.Puntos</p>
                <p class="mr-4">Porcentaje: @asignacion.Porcentaje</p>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="RevertirCambios">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            @if (asignacion.Tipo.Equals("Asistencia"))
                            {
                            <th width="25%">Estado Actual</th>
                            <th width="30%">Estado</th>
                            }
                            <th width="15%">Puntos</th>
                            <th width="15%">%</th>
                            <th width="15%">Nota</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @if (asignacion.Tipo.Equals("Asistencia"))
                            {
                                <td><p>@evaluacion.Estado</p></td>
                                <td>
                                    <Dropdown TItem="string" OnSelected="@EstadoSeleccionado">
                                        <InitialTip>Estado</InitialTip>
                                        <ChildContent>
                                            <DropdownListItem Item="@list1[0]">Presente</DropdownListItem>
                                            <DropdownListItem Item="@list1[1]">Escape</DropdownListItem>
                                            <DropdownListItem Item="@list1[2]">Justificada</DropdownListItem>
                                            <DropdownListItem Item="@list1[3]">Injustificada</DropdownListItem>
                                            <DropdownListItem Item="@list1[4]">Tardía</DropdownListItem>
                                        </ChildContent>
                                    </Dropdown>
                                </td>
                            }
                            <td><input type="number" @bind="@evaluacion.Puntos" /></td>
                            <td> <input type="number" @bind="@evaluacion.Porcentaje" /></td>
                            <td><input type="number" @bind="@evaluacion.Nota" /></td>
                        </tr>

                    </tbody>


                </table>
 

            </div>
            <div class="modal-footer">
                <button class="btn btn-outline-success" @onclick="GuardarNota">Guardar</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter] public EventCallback CerrarEditar2 { get; set; }
    [Parameter] public Asignaciones asignacion { get; set; }
    [Parameter] public Evaluaciones evaluacion { get; set; }

    async Task GuardarNota()
    {
        if (asignacion.Tipo.Equals("Asistencia"))
        {
            if (!evaluacion.Estado.Equals("Ninguno"))
            {
                await NotaVerificada();
            }
        }
        else
        {
            await NotaVerificada();
        }

    }

    async Task NotaVerificada()
    {
        if(evaluacion.Nota >= 0 && evaluacion.Porcentaje >= 0 && evaluacion.Puntos >= 0)
        {

            Boolean resultado = await ServicioEvaluaciones.PutEvaluaciones(evaluacion);
            if (resultado)
            {
                await RevertirCambios();
            }
        }
    }
    private void EstadoSeleccionado(string selection)
    {
        evaluacion.Estado = selection;
    }
    async Task RevertirCambios()
    {
        await CerrarEditar2.InvokeAsync(null);
    }
}

