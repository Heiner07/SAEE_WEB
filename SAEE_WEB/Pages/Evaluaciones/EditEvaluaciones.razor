@inject AsignacionesServices ServicioAsignaciones
@inject EvaluacionesServices ServicioEvaluaciones
@inject EstudiantesServices ServicioEstudiantes
<style>
    input[type=text], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
</style>

<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-scrollable modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Estudiantes</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="RevertirCambios">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
                <div class="modal-body">
                    <div class="container">
                        @if (estudiantes.Count != 0)
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Cedula</th>
                                        <th>Nombre</th>
                                        <th>Puntos</th>
                                        <th>Porcentaje</th>
                                        <th>Nota</th>
                                        <th>Opciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var estu in estudiantes)
                                    {
                                        <tr>

                                            <td>@estu.Cedula</td>
                                            <td>@estu.Nombre</td>
                                            <td>@estu.Puntos</td>
                                            <td>@estu.Porcentaje</td>
                                            <td>@estu.Nota</td>
                                            <td>
                                                <button class="btn btn-outline-info" @onclick="(() => EditarEvaluacionEstudiante(estu.evaluacion))" >Editar</button>
                                            </td>
                                        </tr>

                                    }

                                </tbody>


                            </table>
                        }
                    </div>
                </div>
            </div>
        @if (mostrarEditar)
        {
            <ModalNota CerrarEditar2="@cerrarEditar2" asignacion="@asignacion" evaluacion="@evaluacion"></ModalNota>
        }
        </div>
</div>

@code{
    [Parameter] public EventCallback CerrarEditar { get; set; }
    [Parameter] public Asignaciones asignacion { get; set; }
    Evaluaciones [] evaluaciones { get; set; }
    List<EstudianteEvaluacion> estudiantes { get; set; }
    Evaluaciones evaluacion { get; set; }
    Boolean mostrarEditar = false;
    public class EstudianteEvaluacion
    {
        public Evaluaciones evaluacion { get; set; }
        public string Cedula { get; set; }
        public string Nombre { get; set; }
        public Decimal Puntos { get; set; }
        public Decimal Porcentaje { get; set; }
        public int Nota { get; set; }
        public string Estado { get; set; }
    }

    private void EditarEvaluacionEstudiante(Evaluaciones estu)
    {
        mostrarEditar = true;
        evaluacion = estu;
    }

    protected override async Task OnInitializedAsync()
    {
        estudiantes = new List<EstudianteEvaluacion>();
        await cargarEvaluaciones();

    }
    async Task cargarEvaluaciones()
    {
        estudiantes = new List<EstudianteEvaluacion>();
        evaluaciones = await ServicioEvaluaciones.GetEvaluacionesXAsignacion(asignacion.Id);
        foreach(var i in evaluaciones)
        {
            EstudianteEvaluacion nuevo = new EstudianteEvaluacion();
            Estudiantes estudiante = await ServicioEstudiantes.GetEstudiante(i.Estudiante);
            nuevo.evaluacion = i;
            nuevo.Cedula = estudiante.Cedula;
            nuevo.Nombre = estudiante.Nombre + " " + estudiante.PrimerApellido + " " + estudiante.SegundoApellido;
            nuevo.Puntos = i.Puntos;
            nuevo.Porcentaje = i.Porcentaje;
            nuevo.Nota = i.Nota;
            nuevo.Estado = i.Estado;
            estudiantes.Add(nuevo);
        }
    }
    public async Task cerrarEditar2()
    {
        mostrarEditar = false;
        await cargarEvaluaciones();

    }
    async Task RevertirCambios()
    {
        await CerrarEditar.InvokeAsync(null);
    }
}

