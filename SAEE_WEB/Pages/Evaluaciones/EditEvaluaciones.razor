@inject AsignacionesServices ServicioAsignaciones
@inject EvaluacionesServices ServicioEvaluaciones
@inject EstudiantesServices ServicioEstudiantes
@inject ProfesoresServices ServicioProfesores
<style>
    input[type=text], select {
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

.mdc-dialog .mdc-dialog__container { width: 100%;}
.mdc-dialog .mdc-dialog__surface {
    max-width: none;
    width: 55%;
}
</style>

<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
    <MatDialogTitle>Evaluando estudiantes</MatDialogTitle>
    <MatDialogActions>
        <button type="button" class="btn btn-warning" @onclick="EnviarInforme">
            Enviar Informe
        </button>
    </MatDialogActions>
    <MatDialogContent>
        <div class="container">
            @if (estudiantes.Count != 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Cedula</th>
                            <th>Nombre</th>
                            <th>Puntos</th>
                            <th>Porcentaje</th>
                            <th>Nota</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var estu in estudiantes)
                        {
                            <tr>

                                <td>@estu.Cedula</td>
                                <td>@estu.Nombre</td>
                                <td>@estu.Puntos</td>
                                <td>@estu.Porcentaje</td>
                                <td>@estu.Nota</td>
                                <td>
                                    <button class="btn btn-outline-info" @onclick="(() => EditarEvaluacionEstudiante(estu.evaluacion))">Editar</button>
                                </td>
                            </tr>

                        }

                    </tbody>


                </table>
            }
        </div>
        @if (mostrarEditar)
        {
            <ModalNota CerrarEditar2="@cerrarEditar2" asignacion="@asignacion" evaluacion="@evaluacion"></ModalNota>
        }
    </MatDialogContent>
    <MatDialogActions>
        <button type="button" class="btn btn-danger" @onclick="RevertirCambios">
            Cerrar
        </button>
    </MatDialogActions>
</MatDialog>

@code{
    [Parameter] public String cursoSeleccionado { get; set;}
    [Parameter] public String grupoSeleccionado { get; set;}
    [Parameter] public int anno { get; set;}
    [Parameter] public String rubroSeleccionado { get; set;}
    [Parameter] public EventCallback CerrarEditar { get; set; }
    [Parameter] public Asignaciones asignacion { get; set; }
    [Parameter] public int periodo { get; set; }
    [Parameter] public bool dialogIsOpen { get; set; }
    [Parameter] public int idProfesor { get; set; }
    Evaluaciones [] evaluaciones { get; set; }
    List<EstudianteEvaluacion> estudiantes { get; set; }
    Evaluaciones evaluacion { get; set; }
    Boolean mostrarEditar = false;
    Profesores profesor { get; set; }
    public class EstudianteEvaluacion
    {
        public Evaluaciones evaluacion { get; set; }
        public string Cedula { get; set; }
        public string Nombre { get; set; }
        public Decimal Puntos { get; set; }
        public Decimal Porcentaje { get; set; }
        public int Nota { get; set; }
        public string Estado { get; set; }
    }
    public void EnviarInforme()
    {
        Console.WriteLine(cursoSeleccionado);
        Console.WriteLine(grupoSeleccionado);
        Console.WriteLine(anno);
        Console.WriteLine(cursoSeleccionado);
        Console.WriteLine(asignacion.Tipo);
        Console.WriteLine(profesor.Correo);

    }
    private void EditarEvaluacionEstudiante(Evaluaciones estu)
    {
        mostrarEditar = true;
        evaluacion = estu;
    }

    protected override async Task OnInitializedAsync()
    {
        estudiantes = new List<EstudianteEvaluacion>();
        await cargarEvaluaciones();
        profesor = await ServicioProfesores.GetProfesores(idProfesor);

    }
    async Task cargarEvaluaciones()
    {
        estudiantes = new List<EstudianteEvaluacion>();
        evaluaciones = await ServicioEvaluaciones.GetEvaluacionesXAsignacion(asignacion.Id,periodo,idProfesor);
        foreach(var i in evaluaciones)
        {
            EstudianteEvaluacion nuevo = new EstudianteEvaluacion();
            Estudiantes estudiante = await ServicioEstudiantes.GetEstudiante(i.Estudiante);
            nuevo.evaluacion = i;
            nuevo.Cedula = estudiante.Cedula;
            nuevo.Nombre = estudiante.Nombre + " " + estudiante.PrimerApellido + " " + estudiante.SegundoApellido;
            nuevo.Puntos = i.Puntos;
            nuevo.Porcentaje = i.Porcentaje;
            nuevo.Nota = i.Nota;
            nuevo.Estado = i.Estado;
            estudiantes.Add(nuevo);
        }
    }
    public async Task cerrarEditar2()
    {
        mostrarEditar = false;
        await cargarEvaluaciones();

    }
    async Task RevertirCambios()
    {
        await CerrarEditar.InvokeAsync(null);
    }
}

