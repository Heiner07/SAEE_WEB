@page "/evaluaciones"
@inject CursosServices ServicioCursos
@inject CursosGruposServices ServicioGruposCursos
@inject GruposServices ServicioGrupos
@inject AsignacionesServices ServicioAsignaciones

@{ var list = new List<string> { "Tareas", "Exámenes", "Cotidiano", "Proyecto", "Asistencia" }; }
<div class="container">
    <h3>Evaluaciones</h3>
    <form class="form-inline" action="/">
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@PeriodoSeleccionado">
                <InitialTip>Año</InitialTip>
                <ChildContent>
                    <DropdownListItem Item="2017">2017</DropdownListItem>
                    <DropdownListItem Item="2018">2018</DropdownListItem>
                    <DropdownListItem Item="2019">2019</DropdownListItem>
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@CursoSeleccionado">
                <InitialTip>Curso</InitialTip>
                <ChildContent>
                    @if (cursos == null)
                    {

                    }
                    else if (cursos.Length == 0)
                    {

                    }
                    else
                    {
                        @foreach (var curso in cursos)
                        {
                            <DropdownListItem Item="@curso.Id">@curso.Nombre</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@PeriodoSeleccionado">
                <InitialTip>Periodo</InitialTip>
                <ChildContent>
                    @if (periodos.Count != 0)
                    {
                        @foreach (var i in periodos)
                        {
                            <DropdownListItem Item="@i">@i</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@GrupoSeleccionado">
                <InitialTip>Grupo</InitialTip>
                <ChildContent>
                    @if (gruposenCurso.Count != 0)
                    {
                        @foreach (var i in gruposenCurso)
                        {
                            <DropdownListItem Item="@i.Id">@i.Grupo</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="string" OnSelected="@RubroSeleccionado">
                <InitialTip>Rubro</InitialTip>
                <ChildContent>
                    <DropdownListItem Item="@list[0]">Tareas</DropdownListItem>
                    <DropdownListItem Item="@list[1]">Exámenes</DropdownListItem>
                    <DropdownListItem Item="@list[2]">Cotidiano</DropdownListItem>
                    <DropdownListItem Item="@list[3]">Proyectos</DropdownListItem>
                    <DropdownListItem Item="@list[4]">Asistencia</DropdownListItem>
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-warning mr-4" @onclick="VerEvaluaciones">Ver</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-success mr-4">Guardar</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-danger mr-4">Exportar</button>
        </div>
    </form>
    <p></p>
    <div class="table-responsive">
        @if (asignaciones == null)
        {
            <text> Cargando... </text>
        }
        else if (asignaciones.Length == 0)
        {
            <text> No hay asignaciones de este profesor</text>

        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Tipo</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Estado</th>
                        <th>Fecha</th>
                        <th>Puntos</th>
                        <th>Porcentaje</th>
                        <th>Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var asig in asignaciones)
                    {
                        <tr>

                            <td>@asig.Tipo</td>
                            <td>@asig.Nombre</td>
                            <td>@asig.Descripcion</td>
                            <td>@asig.Estado</td>
                            <td>@asig.Fecha</td>
                            <td>@asig.Puntos</td>
                            <td>@asig.Porcentaje</td>
                            <td>
                                <button class="btn btn-outline-info" @onclick="(() => EditarEvaluacion(asig))">Evaluar</button>
                            </td>
                        </tr>

                    }

                </tbody>


            </table>
        }

    </div>
    <p></p>
    @if (mostrarEditar)
    {
        <EditEvaluaciones CerrarEditar="@cerrarEditar"  asignacion ="@asignacion"></EditEvaluaciones>
    }
</div>

@code{


    Cursos[] cursos { get; set; }
    Cursos cursoSeleccionado { get; set; }
    List<Grupos> gruposenCurso { get; set; }
    List<int> periodos { get; set; }
    Asignaciones [] asignaciones { get; set; }
    Asignaciones asignacion { get; set;}
    Boolean mostrarEditar = false;
    String rubro = "";
    int idcurso = 0, idgrupo = 0;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    int idProfesor = 0;
    protected override async Task OnInitializedAsync()
    {
        asignacion = new Asignaciones();
        periodos = new List<int>();
        gruposenCurso = new List<Grupos>();
        AuthenticationState authState = await AuthenticationState;
        var usuario = authState.User;
        idProfesor = int.Parse(usuario.Claims.Where(U => U.Type.Equals("Id")).FirstOrDefault().Value);
        await CargarCursos();
    }

    async Task VerEvaluaciones()
    {
        if (!rubro.Equals("") && idcurso != 0 && idgrupo != 0)
        {
            asignaciones = await ServicioAsignaciones.GetAsignacionesDetallada(idProfesor, idcurso, idgrupo, rubro);
        }
    }
    private void EditarEvaluacion(Asignaciones asig)
    {
        asignacion = asig;
        mostrarEditar = true;
    }

    async Task CargarCursos()
    {
        cursos = await ServicioCursos.GetCursos(idProfesor);

    }
    private void GrupoSeleccionado(int selection)
    {
        idgrupo = selection;
    }
    private void RubroSeleccionado(string selection)
    {
        rubro = selection;
    }

    async Task CursoSeleccionado(int selection)
    {
        idcurso = selection;
        gruposenCurso = new List<Grupos>();
        periodos = new List<int>();
        cursoSeleccionado = await ServicioCursos.GetCursos(idProfesor, selection);
        CursosGrupos[] gruposid = await ServicioGruposCursos.GetCursosGrupos();
        List<Grupos> grupos = await ServicioGrupos.GetGrupos(idProfesor);
        int idCurso = cursoSeleccionado.Id;
        int per = cursoSeleccionado.CantidadPeriodos;
        foreach (var grupo in gruposid)
        {
            if (grupo.IdCurso == idCurso)
            {
                foreach (var g in grupos)
                {
                    if (g.Id == grupo.IdGrupo)
                    {
                        gruposenCurso.Add(g);
                    }
                }
            }
        }


        for (int i = 1; i <= per; i++)
            periodos.Add(i);
    }

    private void PeriodoSeleccionado(int selection)
    {
        Console.WriteLine(selection);
    }


    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
    }
    void cerrarEditar()
    {
        mostrarEditar = false;

    }
}

