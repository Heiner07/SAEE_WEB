@page "/evaluaciones"
@inject CursosServices ServicioCursos
@inject CursosGruposServices ServicioGruposCursos
@inject GruposServices ServicioGrupos


<div class="container">
    <h3>Evaluaciones</h3>
    <form class="form-inline" action="/">
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@PeriodoSeleccionado">
                <InitialTip>Año</InitialTip>
                <ChildContent>
                    <DropdownListItem Item="2017">2017</DropdownListItem>
                    <DropdownListItem Item="2018">2018</DropdownListItem>
                    <DropdownListItem Item="2019">2019</DropdownListItem>
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@CursoSeleccionado">
                <InitialTip>Curso</InitialTip>
                <ChildContent>
                    @if (cursos == null)
                    {

                    }
                    else if (cursos.Length == 0)
                    {

                    }
                    else
                    {
                        @foreach (var curso in cursos)
                        {
                            <DropdownListItem Item="@curso.Id">@curso.Nombre</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@PeriodoSeleccionado">
                <InitialTip>Periodo</InitialTip>
                <ChildContent>
                    @if (periodos.Count != 0)
                    {
                        @foreach (var i in periodos)
                        {
                            <DropdownListItem Item="@i">@i</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>

        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@PeriodoSeleccionado">
                <InitialTip>Grupo</InitialTip>
                <ChildContent>
                    @if (gruposenCurso.Count != 0)
                    {
                        @foreach (var i in gruposenCurso)
                        {
                            <DropdownListItem Item="@i.Id">@i.Grupo</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-warning mr-4">Ver</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-success mr-4">Guardar</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-outline-danger mr-4">Exportar</button>
        </div>
    </form>
    <p></p>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre del estudiante</th>
                    <th>Identificación</th>
                    <th>Cotidiano</th>
                    <th>Tarea</th>
                    <th>Pruebas</th>
                    <th>Proyectos</th>
                    <th>Asistencia</th>
                    <th>Nota Final</th>
                    <th>Ponderado</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Cristopher Vaciana</td>
                    <td>702400593</td>
                    <td>0</td>
                    <td>0</td>
                    <td>0</td>
                    <td>0</td>
                    <td>100</td>
                    <td>10</td>
                    <td>3</td>
                    <td><button type="button" class="btn btn-outline-info" @onclick="AbrirModal">Editar</button></td>
                </tr>
            </tbody>
        </table>
    </div>
    <p></p>
    <form class="form-inline">
    </form>
    @if (mostrarEditar)
    {
        <EditEvaluaciones CerrarEditar="@cerrarEditar"></EditEvaluaciones>
    }
</div>

@code{

    Cursos[] cursos { get; set; }
    Cursos cursoSeleccionado { get; set; }
    List<Grupos> gruposenCurso { get; set; }
    List<int> periodos { get; set; }
    Boolean mostrarEditar = false;
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    int idProfesor = 0;
    protected override async Task OnInitializedAsync()
    {
        periodos = new List<int>();
        gruposenCurso = new List<Grupos>();
        AuthenticationState authState = await AuthenticationState;
        var usuario = authState.User;
        idProfesor = int.Parse(usuario.Claims.Where(U => U.Type.Equals("Id")).FirstOrDefault().Value);
        Console.WriteLine(idProfesor);
        await CargarCursos();
    }

    async Task CargarCursos()
    {
        cursos = await ServicioCursos.GetCursos(idProfesor);

    }

    async Task CursoSeleccionado(int selection)
    {
        gruposenCurso = new List<Grupos>();
        periodos = new List<int>();
        cursoSeleccionado = await ServicioCursos.GetCursos(idProfesor, selection);
        CursosGrupos[] gruposid = await ServicioGruposCursos.GetCursosGrupos();
        List<Grupos> grupos = await ServicioGrupos.GetGrupos(idProfesor);
        int idCurso = cursoSeleccionado.Id;
        int per = cursoSeleccionado.CantidadPeriodos;
        foreach (var grupo in gruposid) {
            if (grupo.IdCurso == idCurso){
                foreach(var g in grupos)
                {
                    if(g.Id == grupo.IdGrupo)
                    {
                        gruposenCurso.Add(g);
                    }
                }
            }
        }


        for (int i = 1; i <= per; i++)
            periodos.Add(i);
        Console.WriteLine(cursoSeleccionado.CantidadPeriodos);
    }

    private void PeriodoSeleccionado(int selection)
    {
        Console.WriteLine(selection);
    }


    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
    }
    private void AbrirModal()
    {
        mostrarEditar = true;
    }
    void cerrarEditar()
    {
        mostrarEditar = false;

    }
}

