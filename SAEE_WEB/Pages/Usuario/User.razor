@page "/Usuario"
@inject ProfesoresServices ServicioProfesores
@inject NavigationManager Navigation
<div class="container">
    <h3>Administrar perfil</h3>
    <div class="card-body border rounded">
        <EditForm Model="@Profesor" OnValidSubmit="ManejarEvento">
            <div class="form-group">
                <label for="InputCedula"><strong>Cédula</strong></label>
                <input disabled class="form-control" type="text" placeholder="Cedula" @bind="Profesor.Cedula" id="InputCedula" />
                <ValidationMessage For="@(() => Profesor.Cedula)" />
            </div>
            @if (Editando)
            {
                <div class="form-group">
                    <label for="InputNombre"><strong>Nombre</strong></label>
                    <input class="form-control" type="text" placeholder="Nombre" @bind="Profesor.Nombre" id="InputNombre" />
                    <ValidationMessage For="@(() => Profesor.Nombre)" />
                </div>
                <div class="form-group">
                    <label for="InputPrimerApellido"><strong>Primer apellido</strong></label>
                    <input class="form-control" type="text" placeholder="Primer apellido" @bind="Profesor.PrimerApellido" id="InputPrimerApellido" />
                    <ValidationMessage For="@(() => Profesor.PrimerApellido)" />
                </div>
                <div class="form-group">
                    <label for="InputSegundoApellido"><strong>Segundo apellido</strong></label>
                    <input class="form-control" type="text" placeholder="Segundo apellido" @bind="Profesor.SegundoApellido" id="InputSegundoApellido" />
                    <ValidationMessage For="@(() => Profesor.SegundoApellido)" />
                </div>
                <div class="form-group">
                    <label for="InputCorreo"><strong>Correo</strong></label>
                    <input class="form-control" type="email" placeholder="Correo" @bind="Profesor.Correo" id="InputCorreo" />
                    <ValidationMessage For="@(() => Profesor.Correo)" />
                </div>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelarEditar">Cancelar</button>
            }
            else
            {
                <div class="form-group">
                    <label for="InputNombre"><strong>Nombre</strong></label>
                    <input disabled class="form-control" type="text" placeholder="Nombre" @bind="Profesor.Nombre" id="InputNombre" />
                    <ValidationMessage For="@(() => Profesor.Nombre)" />
                </div>
                <div class="form-group">
                    <label for="InputPrimerApellido"><strong>Primer apellido</strong></label>
                    <input disabled class="form-control" type="text" placeholder="Primer apellido" @bind="Profesor.PrimerApellido" id="InputPrimerApellido" />
                    <ValidationMessage For="@(() => Profesor.PrimerApellido)" />
                </div>
                <div class="form-group">
                    <label for="InputSegundoApellido"><strong>Segundo apellido</strong></label>
                    <input disabled class="form-control" type="text" placeholder="Segundo apellido" @bind="Profesor.SegundoApellido" id="InputSegundoApellido" />
                    <ValidationMessage For="@(() => Profesor.SegundoApellido)" />
                </div>
                <div class="form-group">
                    <label for="InputCorreo"><strong>Correo</strong></label>
                    <input disabled class="form-control" type="email" placeholder="Correo" @bind="Profesor.Correo" id="InputCorreo" />
                    <ValidationMessage For="@(() => Profesor.Correo)" />
                </div>
                <button type="submit" class="btn btn-success">Editar</button>
            }
            <DataAnnotationsValidator />
        </EditForm>
    </div>
    @if (MostrarCambioContrasenia)
    {
        <Password Profesor="Profesor" GuardarProfesor="GuardarProfesor" OcultarModal="OcultarCambioContrasenia" />
    }
    <br/>
    <div>
        <button type="button" class="btn btn-danger" @onclick="MostrarCambio">Cambiar contraseña</button>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    Profesores Profesor = new Profesores();
    bool Editando = false, MostrarCambioContrasenia = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationState;
        var usuario = authState.User;

        if (usuario.Identity.IsAuthenticated)
        {
            Profesor = await ServicioProfesores.GetProfesores(int.Parse(usuario.Claims.Where(U => U.Type.Equals("Id")).FirstOrDefault().Value));
        }
    }

    async Task ManejarEvento()
    {
        if (Editando)
        {
            await GuardarProfesor();
            Editando = false;
        }
        else
        {
            Editando = true;
        }
    }

    async Task CancelarEditar()
    {
        await ServicioProfesores.RollbackProfesores(Profesor);
        Editando = false;
    }

    async Task GuardarProfesor()
    {
        await ServicioProfesores.PutProfesores(Profesor);
        //Navigation.NavigateTo("profesores", true);
    }

    void MostrarCambio()
    {
        MostrarCambioContrasenia = true;
    }

    void OcultarCambioContrasenia()
    {
        MostrarCambioContrasenia = false;
    }
}
