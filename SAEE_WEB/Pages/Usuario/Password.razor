<MatDialog @bind-IsOpen="@dialogIsOpen" CanBeClosed="false">
    <MatDialogTitle>Cambiando contraseña</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@ContraseniaNueva" OnValidSubmit="@CambiarContrasenia">
            <div class="form-group">
                <label for="InputContrasenia"><strong>Contraseña actual</strong></label>
                <input class="form-control" type="password" placeholder="Contraseña actual" @bind="ContraseniaNueva.Actual" />
                <ValidationMessage For="@(() => ContraseniaNueva.Actual)" />
            </div>
            <div class="form-group">
                <label for="InputContrasenia"><strong>Contraseña nueva</strong></label>
                <input class="form-control" type="password" placeholder="Contraseña nueva" @bind="ContraseniaNueva.Nueva" />
                <ValidationMessage For="@(() => ContraseniaNueva.Nueva)" />
            </div>
            <div class="form-group">
                <label for="InputContrasenia"><strong>Confirmar contraseña nueva</strong></label>
                <input class="form-control" type="password" placeholder="Contraseña nueva" @bind="ContraseniaNueva.Confirmada" />
                <ValidationMessage For="@(() => ContraseniaNueva.Confirmada)" />
            </div>
            @if (Error)
            {
                <div class="form-group">
                    <label class="alert-danger">@MsgError</label>
                </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OcultarModal">Cancelar</button>
                <button type="submit" class="btn btn-primary">Cambiar</button>
            </div>
            <DataAnnotationsValidator />
        </EditForm>
    </MatDialogContent>
</MatDialog>

@code {
    [Parameter]
    public bool dialogIsOpen { get; set; }
    [Parameter]
    public Profesores Profesor { get; set; }
    [Parameter]
    public EventCallback GuardarProfesor { get; set; }
    [Parameter]
    public EventCallback OcultarModal { get; set; }

    ContraseniaNueva ContraseniaNueva = new ContraseniaNueva();
    bool Error = false;
    string MsgError = "Las contraseñas no coinciden";

    protected override Task OnParametersSetAsync()
    {
        ContraseniaNueva = new ContraseniaNueva();
        Error = false;
        return base.OnParametersSetAsync();
    }

    async void CambiarContrasenia()
    {
        if (ContraseniaNueva.Actual.Equals(Profesor.Contrasenia))
        {
            if (ContraseniaNueva.Nueva.Equals(ContraseniaNueva.Confirmada))
            {
                Profesor.Contrasenia = ContraseniaNueva.Nueva;
                await GuardarProfesor.InvokeAsync(null);
                await OcultarModal.InvokeAsync(null);
            }
            else
            {
                MsgError = "Las contraseñas no coinciden";
                Error = true;
            }
        }
        else
        {
            MsgError = "La contraseña actual es incorrecta";
            Error = true;
        }
    }

    void Cancelar()
    {
        Error = false;

    }
}
