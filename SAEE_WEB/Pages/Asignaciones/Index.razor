@page "/asignaciones"
@inject CursosServices ServicioCursos
@inject CursosGruposServices ServicioGruposCursos
@inject GruposServices ServicioGrupos
@inject AsignacionesServices ServicioAsignaciones
@inject EvaluacionesServices ServicioEvaluaciones
@inject EstudiantesGruposServices ServicioEG
@{ var list = new List<string> { "Tareas", "Exámenes", "Cotidiano", "Proyecto", "Asistencia" }; }
@{ var list1 = new List<string> { "Presente", "Escape", "Justificada", "Injustificada", "Tardía" }; }
<div class="container">
    @if (mostrarError)
    {
        <div class="alert @tipoMsg alert-dismissible fade show" role="alert">
            <strong>@headerMsg</strong> @msjError
            <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="@(() => mostrarError = false)">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    <h3>Asignaciones</h3>
    <form class="form-inline">
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@CursoSeleccionado">
                <InitialTip>Curso</InitialTip>
                <ChildContent>
                    @if (cursos == null)
                    {

                    }
                    else if (cursos.Length == 0)
                    {

                        }
                        else
                        {
                            @foreach (var curso in cursos)
                            {
                                <DropdownListItem Item="@curso.Id">@curso.Nombre</DropdownListItem>
                            }
                        }
                    </ChildContent>
                </Dropdown>
            </div>
            <div class="form-group">
                <Dropdown TItem="Grupos" OnSelected="@GrupoSeleccionado">
                    <InitialTip>Grupo</InitialTip>
                    <ChildContent>
                        @if (gruposenCurso.Count != 0)
                        {
                            @foreach (var i in gruposenCurso)
                            {
                                <DropdownListItem Item="@i">@i.Grupo | @i.Anio </DropdownListItem>
                            }
                        }
                    </ChildContent>
                </Dropdown>
            </div>
            <div class="form-group">
                <Dropdown TItem="string" OnSelected="@RubroSeleccionado">
                    <InitialTip>Rubro</InitialTip>
                    <ChildContent>
                        <DropdownListItem Item="@list[0]">Tareas</DropdownListItem>
                        <DropdownListItem Item="@list[1]">Exámenes</DropdownListItem>
                        <DropdownListItem Item="@list[2]">Cotidiano</DropdownListItem>
                        <DropdownListItem Item="@list[3]">Proyecto</DropdownListItem>
                        <DropdownListItem Item="@list[4]">Asistencia</DropdownListItem>
                    </ChildContent>
                </Dropdown>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-outline-warning mr-4" @onclick="VerEvaluaciones"><i class="fa fa-search"></i></button>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-outline-info mr-4" @onclick="CargarAsignaciones">Listar Todos</button>
            </div>
        </form>
        <p></p>
        <p>
            <button type="button" class="btn btn-primary" @onclick="AbrirCerrarFormAgregar">@TextoBotonAgregar</button>
        </p>
        @if (mostrarFormulario)
        {
            <div class="card-body border rounded">
                <form>
                    <div class="form-group">
                        <label for="InputNombre"><strong>Nombre</strong></label>
                        <input class="form-control" type="text" placeholder="Nombre" id="InputNombre" @bind="@asignacion.Nombre" />

                </div>
                <div class="form-group">
                    <label for="InputDescripcion"><strong>Descripcion</strong></label>
                    <input class="form-control" type="text" placeholder="Descripcion" id="InputDescripcion" @bind="@asignacion.Descripcion" />

                </div>
                @if (MostrarCMBEstado)
                {
                    <div class="form-group" id="cmbEstado">
                        <Dropdown TItem="string" OnSelected="@EstadoSeleccionado">
                            <InitialTip>Estado</InitialTip>
                            <ChildContent>
                                <DropdownListItem Item="@list1[0]">Presente</DropdownListItem>
                                <DropdownListItem Item="@list1[1]">Escape</DropdownListItem>
                                <DropdownListItem Item="@list1[2]">Justificada</DropdownListItem>
                                <DropdownListItem Item="@list1[3]">Injustificada</DropdownListItem>
                                <DropdownListItem Item="@list1[4]">Tardía</DropdownListItem>
                            </ChildContent>
                        </Dropdown>
                    </div>
                }

                    <div class="form-group">
                        <label for="InputFecha"><strong>Fecha (Mes/Día/Año)</strong></label>
                        <input class="form-control" type="date" placeholder="Fecha de Ingreso" id="InputFecha" @bind="@asignacion.Fecha" />

                </div>
                <div class="form-group">
                    <label for="InputPuntos"><strong>Puntos</strong></label>
                    <input class="form-control" type="number" placeholder="Puntos" id="InputPuntos" @bind="@asignacion.Puntos" />

                </div>
                <div class="form-group">
                    <label for="InputPorcentaje"><strong>Porcentaje</strong></label>
                    <input class="form-control" type="number" placeholder="Porcentaje" id="InputPorcentaje" @bind="@asignacion.Porcentaje" />

                </div>

                <div class="form-group" id="notificacionCorreo">
                    <label for="InputNotificacion"><strong>Notificación</strong></label>
                    <div class=@claseBotonNotificacion>
                        <button class="btn btn-secondary dropdown-toggle"
                                type="button" id="dropdownMenuButton"
                                data-toggle="dropdown" aria-haspopup="true"
                                aria-expanded="false"
                                @onclick="MostrarOpcionesN">
                            @if (asignacion.Fecha.Date < DateTime.Today.Date)
                            {
                                diasNotificacion = 0;
                                textoBotonNotificacion = "Sin notificación";
                            }
                            @textoBotonNotificacion
                        </button>
                        <div class=@claseOpcionesNotificacion aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" @onclick="(() => NotificacionSeleccionada(0))">Sin notificación</a>
                            @if ((asignacion.Fecha.Date - DateTime.Today.Date).Days >= 1)
                            {
                                <a class="dropdown-item" @onclick="(() => NotificacionSeleccionada(1))">Un día antes</a>
                            }
                            @if ((asignacion.Fecha.Date - DateTime.Today.Date).Days >= 3)
                            {
                                <a class="dropdown-item" @onclick="(() => NotificacionSeleccionada(3))">Tres días antes</a>
                            }
                            @if ((asignacion.Fecha.Date - DateTime.Today.Date).Days >= 7)
                            {
                                <a class="dropdown-item" @onclick="(() => NotificacionSeleccionada(7))">Una semana antes</a>
                            }
                            @if ((asignacion.Fecha.Date - DateTime.Today.Date).Days >= 14)
                            {
                                <a class="dropdown-item" @onclick="(() => NotificacionSeleccionada(14))">Dos semanas antes</a>
                            }
                        </div>
                    </div>
                    @*<Dropdown TItem="int" OnSelected="@NotificacionSeleccionada">
            <InitialTip>Sin notificación</InitialTip>
            <ChildContent>
                <DropdownListItem Item="@diasAnticipacion[0]">Sin notificación</DropdownListItem>
                @if (asignacion.Fecha.Date > DateTime.Today.Date)
                {
                    <DropdownListItem Item="@diasAnticipacion[1]">Un día antes</DropdownListItem>
                    <DropdownListItem Item="@diasAnticipacion[2]">Tres días antes</DropdownListItem>
                    <DropdownListItem Item="@diasAnticipacion[3]">Una semana antes</DropdownListItem>
                    <DropdownListItem Item="@diasAnticipacion[4]">Dos semanas antes</DropdownListItem>
                }
            </ChildContent>
        </Dropdown>*@
                </div>

                <button type="button" class="btn btn-success" @onclick="GuardarAsignacion">@MsgBoton</button>
                @if (mostrarBotonCancelar)
                {
                    <button type="button" class="btn btn-danger mr-4" @onclick="CancelarEdicion">Cancelar</button>
                }
            </form>
        </div>
    }
    @if (asignaciones == null)
    {
        <text> Cargando... </text>
    }
    else if (asignaciones.Length == 0)
    {
        <text> No hay asignaciones de este profesor</text>

    }
    else
    {

            <table class="table">
                <thead>
                    <tr>
                        <th>Tipo</th>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Fecha</th>
                        <th>Puntos</th>
                        <th>Porcentaje</th>
                        <th>Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var asig in asignaciones)
                    {
                    <tr>

                        <td>@asig.Tipo</td>
                        <td>@asig.Nombre</td>
                        <td>@asig.Descripcion</td>
                        <td>@asig.Fecha.ToShortDateString()</td>
                        <td>@asig.Puntos</td>
                        <td>@asig.Porcentaje</td>
                        <td>

                            <button class="btn btn-outline-info" @onclick="(() => EditarAsignacion(asig))">Editar</button>
                            <button class="btn btn-outline-danger" @onclick="(() => EliminarAsignacion(asig))">Borrar</button>
                        </td>



                    </tr>

                }

            </tbody>


        </table>
    }
</div>
@code {
    Boolean MostrarCMBEstado = false;
    Asignaciones asignacion { get; set; }
    Cursos[] cursos { get; set; }
    Cursos cursoSeleccionado { get; set; }
    List<Grupos> gruposenCurso { get; set; }
    Asignaciones[] asignaciones { get; set; }
    List<Estudiantes> estudiantesXgrupo { get; set; }
    Boolean mostrarError = false;
    String MsgBoton = "Crear";
    Boolean Opcion = false;
    String tipoMsg = "alert-warning";
    String msjError = "";
    Grupos grupoSelec { get; set; }
    Boolean mostrarBotonCancelar = false;
    Boolean mostrarFormulario = false;
    String TextoBotonAgregar = "Mostrar Formulario";
    String headerMsg = "ERROR!";

    //Notificaciones
    int diasNotificacion = 0;
    string textoBotonNotificacion = "Sin notificación";
    string claseBotonNotificacion = "dropdown";
    string claseOpcionesNotificacion = "dropdown-menu";
    //---

    String rubro = "";
    int idcurso = 0, idgrupo = 0;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    int idProfesor = 0;
    protected override async Task OnInitializedAsync()
    {
        grupoSelec = new Grupos();
        asignacion = new Asignaciones();
        asignacion.Nombre = "";
        asignacion.Descripcion = "";
        asignacion.Estado = "";
        asignacion.Puntos = 0;
        asignacion.Porcentaje = 0;
        asignacion.Curso = 0;
        asignacion.Grupo = 0;
        asignacion.Tipo = "";
        gruposenCurso = new List<Grupos>();
        AuthenticationState authState = await AuthenticationState;
        var usuario = authState.User;
        idProfesor = int.Parse(usuario.Claims.Where(U => U.Type.Equals("Id")).FirstOrDefault().Value);
        asignacion.Profesor = idProfesor;
        await CargarAsignaciones();
        await CargarCursos();
    }
    async Task VerEvaluaciones()
    {
        if (!rubro.Equals("") && idcurso != 0 && idgrupo != 0)
        {
            asignaciones = await ServicioAsignaciones.GetAsignacionesDetallada(idProfesor, idcurso, idgrupo, rubro);
        }
    }
    async Task CargarCursos()
    {
        cursos = await ServicioCursos.GetCursos(idProfesor);

    }
    async Task CargarAsignaciones()
    {
        asignaciones = await ServicioAsignaciones.GetAsignacionesProfesor(idProfesor);
    }

    async Task EliminarAsignacion(Asignaciones asig)
    {
        Boolean resultado = await ServicioAsignaciones.DeleteAsignaciones(asig);
        if (resultado)
        {
            tipoMsg = "alert-success";
            headerMsg = "HECHO!";
            msjError = "Asignación eliminada satisfactoriamente";
            mostrarError = true;
            await CargarAsignaciones();
        }
    }
    private void CancelarEdicion()
    {
        MsgBoton = "Crear";
        asignacion = new Asignaciones();
        asignacion.Profesor = idProfesor;
        asignacion.Nombre = "";
        asignacion.Descripcion = "";
        asignacion.Estado = "";
        asignacion.Puntos = 0;
        asignacion.Porcentaje = 0;
        asignacion.Curso = 0;
        asignacion.Grupo = 0;
        asignacion.Tipo = "";
        mostrarBotonCancelar = false;
        Opcion = false;
        MostrarCMBEstado = false;
        mostrarFormulario = false;
    }
    private void EditarAsignacion(Asignaciones asig)
    {
        asignacion = asig;
        if (!asignacion.Estado.Equals("Ninguno"))
        {
            MostrarCMBEstado = true;
        }
        MsgBoton = "Guardar Cambios";
        mostrarFormulario = true;
        mostrarBotonCancelar = true;
        Opcion = true;

        //Notificaciones
        if(asignacion.NotificacionesCorreo.Count > 0)
        {
            diasNotificacion = asignacion.NotificacionesCorreo.ElementAt(0).DiasAnticipacion;
        }
        else
        {
            diasNotificacion = 0;
        }
        EstablecerTextoBoton(diasNotificacion);
        //--

    }
    private void AbrirCerrarFormAgregar()
    {

        mostrarFormulario = !mostrarFormulario;
        if (mostrarFormulario)
        {
            TextoBotonAgregar = "Ocultar Formulario";
        }
        else
        {
            TextoBotonAgregar = "Mostrar Formulario";
        }


    }
    async Task GuardarAsignacion()
    {
        if (asignacion.Curso == 0 || asignacion.Tipo.Equals("") || asignacion.Grupo == 0 || asignacion.Nombre.Equals("") ||
            asignacion.Descripcion.Equals("") || asignacion.Fecha.Equals("") || asignacion.Porcentaje == 0 ||
            asignacion.Puntos == 0
            )
        {
            tipoMsg = "alert-warning";
            headerMsg = "ERROR!";
            msjError = "Debe llenar y seleccionar todos los datos requeridos";
            mostrarError = true;
        }
        else
        {

            asignacion.Estado = "Ninguno";

            if (Opcion)
            {
                //Notificaciones
                if (diasNotificacion == 0)// Si es cero, entonces desea eliminar la notificación
                {
                    asignacion.NotificacionesCorreo.Clear();
                }
                else
                {
                    if(asignacion.NotificacionesCorreo.Count == 0)
                    {
                        asignacion.NotificacionesCorreo.Add(new NotificacionesCorreo()
                        {
                            DiasAnticipacion = diasNotificacion
                        });
                    }
                    else
                    {
                        asignacion.NotificacionesCorreo.ElementAt(0).DiasAnticipacion = diasNotificacion;
                    }
                }
                //---

                Boolean resultado = await ServicioAsignaciones.PutAsignaciones(asignacion);
                if (resultado)
                {
                    tipoMsg = "alert-success";
                    headerMsg = "HECHO!";
                    msjError = "Asignación editada satisfactoriamente";
                    mostrarError = true;
                    await CargarAsignaciones();
                    mostrarBotonCancelar = false;
                    Opcion = false;
                    asignacion = new Asignaciones();
                    asignacion.Profesor = idProfesor;
                    asignacion.Nombre = "";
                    asignacion.Descripcion = "";
                    asignacion.Estado = "";
                    asignacion.Puntos = 0;
                    asignacion.Porcentaje = 0;
                    asignacion.Curso = 0;
                    asignacion.Grupo = 0;
                    asignacion.Tipo = "";
                    MsgBoton = "Crear";
                    MostrarCMBEstado = false;
                    mostrarFormulario = false;
                }
                else
                {
                    tipoMsg = "alert-warning";
                    headerMsg = "ALERTA!";
                    msjError = "Error al editar la asignación";
                    mostrarError = true;
                    await ServicioAsignaciones.RollbackAsignaciones(asignacion);
                    await CargarAsignaciones();
                }
            }
            else
            {
                //Notificaciones
                asignacion.NotificacionesCorreo.Add(new NotificacionesCorreo()
                {
                    DiasAnticipacion = diasNotificacion
                });
                //---
                Boolean resultado = await ServicioAsignaciones.PostAsignaciones(asignacion);
                if (resultado)
                {
                    tipoMsg = "alert-success";
                    headerMsg = "HECHO!";
                    msjError = "Asignación agregada satisfactoriamente";
                    mostrarError = true;
                    asignacion = new Asignaciones();
                    asignacion.Profesor = idProfesor;
                    asignacion.Nombre = "";
                    asignacion.Descripcion = "";
                    asignacion.Estado = "";
                    asignacion.Puntos = 0;
                    asignacion.Porcentaje = 0;
                    asignacion.Curso = 0;
                    asignacion.Grupo = 0;
                    asignacion.Tipo = "";
                    await CargarAsignaciones();
                    int idasignacion = asignaciones[asignaciones.Length - 1].Id;
                    int periodos = cursoSeleccionado.CantidadPeriodos;
                    estudiantesXgrupo = await ServicioEG.GetEstudiantesXGrupos(grupoSelec);
                    foreach (var i in estudiantesXgrupo)
                    {
                        for (int j = 1; j <= periodos; j++)
                        {
                            Evaluaciones evaluacion = new Evaluaciones();
                            evaluacion.Asignacion = idasignacion;
                            evaluacion.Estudiante = i.Id;
                            evaluacion.Puntos = 0;
                            evaluacion.Porcentaje = 0;
                            evaluacion.Nota = 0;
                            evaluacion.Estado = "Ninguno";
                            evaluacion.Periodo = j;
                            await ServicioEvaluaciones.PostEvaluaciones(evaluacion);
                        }
                    }
                }
            }
        }
    }
    async Task CursoSeleccionado(int selection)
    {
        gruposenCurso = new List<Grupos>();
        cursoSeleccionado = await ServicioCursos.GetCursos(idProfesor, selection);
        CursosGrupos[] gruposid = await ServicioGruposCursos.GetCursosGrupos();
        List<Grupos> grupos = await ServicioGrupos.GetGrupos(idProfesor);
        int idCurso = cursoSeleccionado.Id;
        int per = cursoSeleccionado.CantidadPeriodos;
        foreach (var grupo in gruposid)
        {
            if (grupo.IdCurso == idCurso)
            {
                foreach (var g in grupos)
                {
                    if (g.Id == grupo.IdGrupo)
                    {
                        gruposenCurso.Add(g);
                    }
                }
            }
        }
        asignacion.Curso = selection;
        idcurso = selection;
    }

    private void GrupoSeleccionado(Grupos selection)
    {
        grupoSelec = selection;
        asignacion.Grupo = selection.Id;
        idgrupo = selection.Id;
    }
    private void EstadoSeleccionado(string selection)
    {
        asignacion.Estado = selection;
    }
    //Notificaciones
    private void MostrarOpcionesN()
    {
        if (claseBotonNotificacion.Equals("dropdown"))
        {
            claseBotonNotificacion = "dropdown show";
            claseOpcionesNotificacion = "dropdown-menu show";
        }
        else
        {
            claseBotonNotificacion = "dropdown";
            claseOpcionesNotificacion = "dropdown-menu";
        }
    }
    private void NotificacionSeleccionada(int selection)
    {
        diasNotificacion = selection;
        EstablecerTextoBoton(selection);
        MostrarOpcionesN();
    }
    private void EstablecerTextoBoton(int selection)
    {
        switch (selection)
        {
            case 1:
                textoBotonNotificacion = "Un día antes";
                break;
            case 3:
                textoBotonNotificacion = "Tres días antes";
                break;
            case 7:
                textoBotonNotificacion = "Una semana antes";
                break;
            case 14:
                textoBotonNotificacion = "Dos semanas antes";
                break;
            default:
                textoBotonNotificacion = "Sin notificación";
                break;
        }
    }
    //---
    private void RubroSeleccionado(string selection)
    {
        rubro = selection;
        asignacion.Tipo = selection;
      /*  if (selection.Equals("Asistencia"))
        {
            MostrarCMBEstado = true;
        }
        else
        {
            MostrarCMBEstado = false;
        }*/
    }
}


