@page "/asignaciones"
@inject CursosServices ServicioCursos
@inject CursosGruposServices ServicioGruposCursos
@inject GruposServices ServicioGrupos
@{ var list = new List<string> { "Tareas", "Exámenes", "Cotidiano","Proyecto","Asistencia" }; }
<div class="container">
    <h3>Asignaciones</h3>
    <form class="form-inline" action="/">
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@CursoSeleccionado">
                <InitialTip>Curso</InitialTip>
                <ChildContent>
                    @if (cursos == null)
                    {

                    }
                    else if (cursos.Length == 0)
                    {

                    }
                    else
                    {
                        @foreach (var curso in cursos)
                        {
                            <DropdownListItem Item="@curso.Id">@curso.Nombre</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="int" OnSelected="@OnSelected">
                <InitialTip>Grupo</InitialTip>
                <ChildContent>
                    @if (gruposenCurso.Count != 0)
                    {
                        @foreach (var i in gruposenCurso)
                        {
                            <DropdownListItem Item="@i.Id">@i.Grupo</DropdownListItem>
                        }
                    }
                </ChildContent>
            </Dropdown>
        </div>
        <div class="form-group">
            <Dropdown TItem="string" OnSelected="@OnSelected1">
                <InitialTip>Rubro</InitialTip>
                <ChildContent>
                    <DropdownListItem Item="@list[0]">Tareas</DropdownListItem>
                    <DropdownListItem Item="@list[1]">Exámenes</DropdownListItem>
                    <DropdownListItem Item="@list[2]">Cotidiano</DropdownListItem>
                    <DropdownListItem Item="@list[3]">Proyecto</DropdownListItem>
                    <DropdownListItem Item="@list[4]">Asistencia</DropdownListItem>
                </ChildContent>
            </Dropdown>
        </div>
    </form>
    <p></p>
    <div class="card-body border rounded">
        <form>
            <div class="form-group">
                <label for="InputCedula"><strong>Nombre</strong></label>
                <input class="form-control" type="text" placeholder="Nombre" id="InputCedula" />

            </div>
            <div class="form-group">
                <label for="InputNombre"><strong>Descripcion</strong></label>
                <input class="form-control" type="text" placeholder="Descripcion" id="InputNombre" />

            </div>
            @if (MostrarCMBEstado)
            {
                <CmbEstados />
            }

            <div class="form-group">
                <label for="InputSegundoApellido"><strong>Fecha</strong></label>
                <input class="form-control" type="date" placeholder="Fecha de Ingreso" id="InputSegundoApellido" />

            </div>
            <div class="form-group">
                <label for="InputCorreo"><strong>Puntos</strong></label>
                <input class="form-control" type="number" placeholder="Puntos" id="InputCorreo" />

            </div>
            <div class="form-group">
                <label for="InputCorreo"><strong>Porcentaje</strong></label>
                <input class="form-control" type="number" placeholder="Porcentaje" id="InputCorreo" />

            </div>
            <button type="submit" class="btn btn-success">Crear</button>

        </form>
    </div>
</div>
@code {
    Boolean MostrarCMBEstado = false;
    Cursos[] cursos { get; set; }
    Cursos cursoSeleccionado { get; set; }
    List<CursosGrupos> gruposenCursoid { get; set; }
    List<Grupos> gruposenCurso { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    int idProfesor = 0;
    protected override async Task OnInitializedAsync()
    {
        gruposenCursoid = new List<CursosGrupos>();
        gruposenCurso = new List<Grupos>();
        AuthenticationState authState = await AuthenticationState;
        var usuario = authState.User;
        idProfesor = int.Parse(usuario.Claims.Where(U => U.Type.Equals("Id")).FirstOrDefault().Value);
        Console.WriteLine(idProfesor);
        await CargarCursos();
    }

    async Task CargarCursos()
    {
        cursos = await ServicioCursos.GetCursos(idProfesor);

    }
    async Task CursoSeleccionado(int selection)
    {
        cursoSeleccionado = await ServicioCursos.GetCursos(idProfesor, selection);
        CursosGrupos[] gruposid = await ServicioGruposCursos.GetCursosGrupos();
        List<Grupos> grupos = await ServicioGrupos.GetGrupos(idProfesor);
        int idCurso = cursoSeleccionado.Id;
        int per = cursoSeleccionado.CantidadPeriodos;
        foreach (var grupo in gruposid) {
            if (grupo.IdCurso == idCurso){
                foreach(var g in grupos)
                {
                    if(g.Id == grupo.IdGrupo)
                    {
                        gruposenCurso.Add(g);
                    }
                }
            }
        }
    }

    private void OnSelected(int selection)
    {
        Console.WriteLine(selection);
    }
    private void OnSelected1(string selection)
    {
        Console.WriteLine(selection);
        if (selection.Equals("Asistencia"))
        {
            MostrarCMBEstado = true;
        }
        else
        {
            MostrarCMBEstado = false;
        }
    }
}


