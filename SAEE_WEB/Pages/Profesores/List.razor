@inject ProfesoresServices ServicioProfesores

@if (profesores == null)
{
    <text>Cargando profesores...</text>
}
else if (profesores.Length == 0)
{
    <text>No hay profesores</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Cédula</th>
                <th>Correo</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profesor in profesores)
            {
                <tr>
                    <td>@profesor.Nombre @profesor.PrimerApellido @profesor.SegundoApellido</td>
                    <td>@profesor.Cedula</td>
                    <td>@profesor.Correo</td>
                    <td>
                        <button class="btn btn-success" @onclick="(()=>MostrarPanelEditar(profesor))">Editar</button>
                        <button class="btn btn-danger">Borrar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (mostrarEditar)
{
    <Edit Profesor="@profesorEditar" CerrarEditar="@OcultarPanelEditar" />
}

@code {
    Profesores[] profesores { get; set; }
    Profesores profesorEditar;
    Boolean mostrarEditar = false;
    [Parameter] public EventCallback Editar { get; set; }
    [Parameter] public EventCallback Borrar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarProfesores();
    }

    async Task CargarProfesores()
    {
        profesores = await ServicioProfesores.GetProfesores();
    }

    void MostrarPanelEditar(Profesores profesor)
    {
        profesorEditar = profesor;
        mostrarEditar = true;
    }

    void OcultarPanelEditar()
    {
        mostrarEditar = false;
    }
}
