@inject ProfesoresServices ServicioProfesores

@if (profesores == null)
{
    <text>Cargando profesores...</text>
}
else if (profesores.Length == 0)
{
    <text>No hay profesores</text>
}
else
{
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Buscar nombre" @bind-value="@TextoBuscar" @bind-value:event="oninput" />
        <div class="input-group-append">
            <button class="btn btn-info">
                <i>Buscar</i>
            </button>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Cédula</th>
                    <th>Correo</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var profesor in profesores)
                {
                    if (profesor.Nombre.ToLower().StartsWith(TextoBuscar.ToLower()))
                    {
                        <tr>
                            <td>@profesor.Nombre @profesor.PrimerApellido @profesor.SegundoApellido</td>
                            <td>@profesor.Cedula</td>
                            <td>@profesor.Correo</td>
                            <td>
                                <button class="btn btn-outline-info" @onclick="(()=>MostrarPanelEditar(profesor))">Editar</button>
                                <button class="btn btn-outline-danger" @onclick="(()=>MostrarPanelBorrar(profesor))">Borrar</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
@if (mostrarEditar)
{
    <Edit Profesor="@profesorEditar" CerrarEditar="@OcultarPanelEditar" />
}
@if (mostrarBorrar)
{
    <Delete Profesor="@profesorEditar" CerrarEliminar="@OcultarPanelBorrar" />
}

@code {
    [Parameter]
    public EventCallback Editar { get; set; }
    [Parameter]
    public EventCallback Borrar { get; set; }

    Profesores[] profesores { get; set; }
    Profesores profesorEditar;
    Boolean mostrarEditar = false;
    Boolean mostrarBorrar = false;
    String TextoBuscar = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarProfesores();
    }

    async Task CargarProfesores()
    {
        profesores = await ServicioProfesores.GetProfesores();
    }

    void MostrarPanelEditar(Profesores profesor)
    {
        profesorEditar = profesor;
        mostrarEditar = true;
    }

    void OcultarPanelEditar()
    {
        mostrarEditar = false;
    }

    void MostrarPanelBorrar(Profesores profesor)
    {
        profesorEditar = profesor;
        mostrarBorrar = true;
    }

    void OcultarPanelBorrar()
    {
        mostrarBorrar = false;
    }
}
